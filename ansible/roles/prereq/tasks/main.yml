---
- name: Set same timezone on every Server
  community.general.timezone:
    name: "{{ system_timezone }}"
  when: (system_timezone is defined) and (system_timezone != "Your/Timezone")

- name: Set SELinux to disabled state
  ansible.posix.selinux:
    state: disabled
  when: ansible_os_family == "RedHat"

- name: Install common networking tools
  become: true
  apt:
    name:
      - net-tools
      - curl
      - wget
      - dnsutils
      - iputils-ping
      - bird
      - bridge-utils
      - arping
    state: present
    update_cache: true

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true
  tags: sysctl

- name: Enable IPv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true
  tags: sysctl

- name: Enable IPv6 router advertisements
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.accept_ra
    value: "2"
    state: present
    reload: true
  tags: sysctl

- name: Add br_netfilter to /etc/modules-load.d/
  ansible.builtin.copy:
    content: br_netfilter
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: u=rw,g=,o=
  when: ansible_os_family == "RedHat"

- name: Load br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present
  when: ansible_os_family == "RedHat"

- name: Set bridge-nf-call-iptables (just to be sure)
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: true
  when: ansible_os_family == "RedHat"
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
  tags: sysctl

- name: Add /usr/local/bin to sudo secure_path
  ansible.builtin.lineinfile:
    line: Defaults    secure_path = {{ secure_path[ansible_os_family] }}
    regexp: Defaults(\s)*secure_path(\s)*=
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: visudo -cf %s
  when: ansible_os_family in [ "RedHat", "Suse" ]

# Pod and service network traffic
- name: Allow pod network traffic from Cilium CIDR (10.52.0.0/16)
  ansible.builtin.command: iptables -I INPUT -s 10.52.0.0/16 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow service network traffic from CoreDNS CIDR (10.43.0.0/16)
  ansible.builtin.command: iptables -I INPUT -s 10.43.0.0/16 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow service network traffic from CoreDNS CIDR (10.43.0.0/16)
  ansible.builtin.command: iptables -I OUTPUT -s 10.43.0.0/16 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow traffic from 10.0.0.0/24 network
- name: Allow traffic from 10.0.0.0/24 network
  ansible.builtin.command: iptables -I INPUT -s 10.0.0.0/24 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Cilium-specific rules
- name: Allow Cilium health check traffic (port 4240)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 4240 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow Cilium agent communication (port 4241)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 4241 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow DNS traffic
- name: Allow incoming DNS traffic (port 53 UDP)
  ansible.builtin.command: iptables -I INPUT -p udp --dport 53 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow outgoing DNS traffic
- name: Allow outgoing DNS traffic (port 53 UDP)
  ansible.builtin.command: iptables -I OUTPUT -p udp --dport 53 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow DNS traffic
- name: Allow incoming DNS traffic (port 53 TCP)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 53 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow outgoing DNS traffic
- name: Allow outgoing DNS traffic (port 53 TCP)
  ansible.builtin.command: iptables -I OUTPUT -p tcp --dport 53 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow incoming HTTPS traffic from all external sources (public internet)
- name: Allow external incoming HTTPS traffic on port 443
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 443 -s 0.0.0.0/0 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow external incoming HTTPS traffic on port 443
  ansible.builtin.command: iptables -I INPUT -p udp --dport 443 -s 0.0.0.0/0 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables


- name: Allow external incoming HTTPS traffic on port 443
  ansible.builtin.command: iptables -I OUTPUT -p udp --dport 443 -s 0.0.0.0/0 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow external incoming HTTPS traffic on port 443
  ansible.builtin.command: iptables -I OUTPUT -p tcp --dport 443 -s 0.0.0.0/0 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow incoming HTTP traffic from all external sources (public internet)
- name: Allow external incoming HTTP traffic on port 80
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 80 -s 0.0.0.0/0 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow traffic to Kubernetes API server (Control Plane)
- name: Allow incoming TCP traffic to Kubernetes API server (port 6443)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 6443 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow NodePort range
- name: Allow incoming NodePort TCP traffic (ports 30000-32767)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 30000:32767 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow Cilium metrics (port 9091)
- name: Allow incoming Cilium metrics traffic (port 9091)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 9091 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow Metrics traffic (port 10250)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 10250 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow Metrics traffic (port 10250)
  ansible.builtin.command: iptables -I INPUT -p udp --dport 10250 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# New rules
# Allow Cilium gops health check (port 9890)
- name: Allow incoming gops health check traffic (port 9890)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 9890 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow VXLAN traffic (port 8472)
- name: Allow incoming VXLAN traffic (port 8472)
  ansible.builtin.command: iptables -I INPUT -p udp --dport 8472 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow BGP traffic (port 179)
- name: Allow incoming BGP traffic (port 179)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 179 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

# Allow BGP traffic (port 179)
- name: Allow incoming BGP traffic (port 179)
  ansible.builtin.command: iptables -I OUTPUT -p tcp --dport 179 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow metallb ingress traffic (port 7946)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 7946 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow metallb egress traffic (port 7946)
  ansible.builtin.command: iptables -I OUTPUT -p tcp --dport 7946 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow dns ingress traffic (port 9153)
  ansible.builtin.command: iptables -I INPUT -p tcp --dport 9153 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables

- name: Allow dns egress traffic (port 9153)
  ansible.builtin.command: iptables -I OUTPUT -p tcp --dport 9153 -j ACCEPT
  become: true
  become_method: sudo
  tags:
  - firewall
  - iptables
